"use strict";(self.webpackChunk_builddao_near_social_js=self.webpackChunk_builddao_near_social_js||[]).push([[442],{999:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>g,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var r=a(4848),t=a(8453),s=a(1470),c=a(9365),i=a(4252);const o={},l="Granting Write Permission",d={id:"advanced/granting-write-permission",title:"Granting Write Permission",description:"<TOCInline",source:"@site/docs/advanced/granting-write-permission.mdx",sourceDirName:"advanced",slug:"/advanced/granting-write-permission",permalink:"/near-social-js/advanced/granting-write-permission",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Storing Data",permalink:"/near-social-js/advanced/storing-data"},next:{title:"Depositing NEAR for Storage",permalink:"/near-social-js/advanced/storage-deposit-withdraw"}},g={},h=[{value:"Overview",id:"overview",level:2},{value:"Terminology",id:"terminology",level:2},{value:"Granting an account write permission",id:"granting-an-account-write-permission",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"granting-write-permission",children:"Granting Write Permission"}),"\n",(0,r.jsx)(i.A,{maxHeadingLevel:4,toc:h}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Accounts can grant write permission to other accounts for a set of keys."}),"\n",(0,r.jsx)(n.h2,{id:"terminology",children:"Terminology"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Grantee"}),": The account that is being granted write access to the list of keys."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Granter"}),": The account that will grant access to the list of keys."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"granting-an-account-write-permission",children:"Granting an account write permission"}),"\n",(0,r.jsxs)(s.A,{defaultValue:"javascript-via-package-manager",values:[{label:"JavaScript (via package manager)",value:"javascript-via-package-manager"},{label:"JavaScript (via CDN)",value:"javascript-via-cdn"},{label:"TypeScript",value:"typescript"}],children:[(0,r.jsx)(c.A,{value:"javascript-via-package-manager",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const { Social } = require('@builddao/near-social-js');\n\nconst grantee = await nearConnection.account('alice.near');\nconst granter = await nearConnection.account('bob.near');\nconst accessKeys = await granter.getAccessKeys();\nconst social = new Social();\nconst transaction = await social.grantWritePermission({\n  blockHash: accessKeys[0].block_hash,\n  granteeAccountId: grantee.accountId,\n  keys: [\n    'alice.near/profile/name',\n    'alice.near/profile/image/url',\n  ],\n  nonce: BigInt(accessKeys[0].nonce + 1), // the nonce to be used for the transaction, must be greater than the access key nonce\n  publicKey: accessKeys[0].public_key,\n  signer: granter,\n});\n\n// ...sign the returned transaction and post to the network\n*/\n"})})}),(0,r.jsx)(c.A,{value:"javascript-via-cdn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"var accessKeys;\nvar grantee;\nvar granter;\nvar social;\n\nnearConnection.account('alice.near')\n  .then((_granter) => {\n    granter = _granter;\n\n    return nearConnection.account('bob.near');\n  })\n  .then((_grantee) => {\n    grantee = _grantee;\n\n    return granter.getAccessKeys();\n  })\n  .then((_accessKeys) => {\n    accessKeys = _accessKeys;\n    social = new NEARSocialSDK();\n\n    return social.grantWritePermission({\n      blockHash: accessKeys[0].block_hash,\n      granteeAccountId: grantee.accountId,\n      keys: [\n        'alice.near/profile/name',\n        'alice.near/profile/image/url',\n      ],\n      nonce: BigInt(accessKeys[0].nonce + 1), // the nonce to be used for the transaction, must be greater than the access key nonce\n      publicKey: accessKeys[0].public_key,\n      signer: granter,\n    });\n  })\n  .then((transaction) => {\n    // ...sign the returned transaction and post to the network\n  });\n"})})}),(0,r.jsx)(c.A,{value:"typescript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Social } from '@builddao/near-social-js';\n\nconst grantee = await nearConnection.account('alice.near');\nconst granter = await nearConnection.account('bob.near');\nconst accessKeys = await granter.getAccessKeys();\nconst social = new Social();\nconst transaction = await social.grantWritePermission({\n  blockHash: accessKeys[0].block_hash,\n  granteeAccountId: grantee.accountId,\n  keys: [\n    'alice.near/profile/name',\n    'alice.near/profile/image/url',\n  ],\n  nonce: BigInt(accessKeys[0].nonce + 1), // the nonce to be used for the transaction, must be greater than the access key nonce\n  publicKey: accessKeys[0].public_key,\n  signer: granter,\n});\n\n// ...sign the returned transaction and post to the network\n*/\n"})})})]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["If the grantee account ID or the account ID in each key is not a valid account ID then a ",(0,r.jsx)(n.a,{href:"../../api-reference/errors#invalidaccountiderror",children:(0,r.jsx)(n.code,{children:"InvalidAccountIdError"})})," is thrown."]})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["If a key does is not owned by the granter, then a ",(0,r.jsx)(n.a,{href:"../../api-reference/errors#keynotallowederror",children:(0,r.jsx)(n.code,{children:"KeyNotAllowedError"})})," is thrown."]})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);